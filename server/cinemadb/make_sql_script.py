import pathlib


def get_comment_header(title):
    return ('-- -----------------------------------------------------\n'
            '-- HEADER_TITLE\n'
            '-- -----------------------------------------------------\n').replace('HEADER_TITLE', title)


def get_schema_section(dbname):
    result = ''
    result += '-- Generated by ' + pathlib.Path(__file__).name + '\n'
    result += '\n'
    result += 'SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;\n'
    result += 'SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;\n'
    result += 'SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE =\n'
    result += '        '
    result += "'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,"
    result += "ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\n"
    result += '\n'
    result += get_comment_header('Schema ' + dbname)
    result += '\n'
    result += "DROP SCHEMA IF EXISTS `cinemadb`;\n"
    result += 'CREATE SCHEMA IF NOT EXISTS `cinemadb` DEFAULT CHARACTER SET utf8mb4;\n'
    result += 'USE `cinemadb`;\n'
    result += '\n'
    return result


def get_tables_section(dbname):
    result = ''
    for table_name in ['Cinema', 'Sale', 'Posti', 'Ruoli', 'Dipendenti', 'Giorni', 'Turni', 'Film',
                       'Proiezioni', 'StatiPrenotazione', 'Prenotazioni']:
        result += get_comment_header('Table `' + dbname + '`.`' + table_name + '`')
        result += '\n'
        with open('tables/' + table_name + '.sql', 'r') as source:
            result += source.read()
        result += '\n'
    return result


def get_udf_section():
    result = get_comment_header('UDF Loadable Functions')
    result += '\n'
    with open('udf/payment_service.sql', 'r') as source:
        result += source.read()
    result += '\n'
    return result


def get_functions_section(dbname):
    result = ''
    for function in pathlib.Path('functions').iterdir():
        result += get_comment_header('Function `' + dbname + '`.`' + function.stem + '`')
        result += '\n'
        result += 'DELIMITER $$\n'
        result += 'USE `cinemadb`$$\n'
        with open(function, 'r') as source:
            result += source.read()
        result = result[:-1] + '$$\n'
        result += '\n'
        result += 'DELIMITER ;\n'
        result += '\n'
    return result


def get_procedures_section(dbname):
    result = ''
    for procedure in pathlib.Path('procedures').iterdir():
        result += get_comment_header('Procedure `' + dbname + '`.`' + procedure.stem + '`')
        result += '\n'
        result += 'DELIMITER $$\n'
        result += 'USE `cinemadb`$$\n'
        with open(procedure, 'r') as source:
            result += source.read()
        result = result[:-1] + '$$\n'
        result += '\n'
        result += 'DELIMITER ;\n'
        result += '\n'
    return result


def get_triggers_section(dbname):
    result = ''
    for trigger in pathlib.Path('triggers').iterdir():
        result += get_comment_header('Trigger `' + dbname + '`.`' + trigger.stem + '`')
        result += '\n'
        result += 'DELIMITER $$\n'
        result += 'USE `cinemadb`$$\n'
        with open(trigger, 'r') as source:
            result += source.read()
        result = result[:-1] + '$$\n'
        result += '\n'
    return result


def get_grants_section():
    result = get_comment_header('Privileges Grant')
    result += '\n'
    result += 'DELIMITER ;\n'
    with open('grants/grants.sql', 'r') as source:
        result += source.read()
    result += '\n'
    return result


def get_data_section(dbname):
    result = ''
    for table_name in ['Cinema', 'Ruoli', 'Giorni', 'Film', 'StatiPrenotazione', 'Sale', 'Posti',
                       'Dipendenti', 'Proiezioni', 'Turni']:
        result += get_comment_header('Data for table `' + dbname + '`.`' + table_name + '`')
        result += '\n'
        with open('data/' + table_name + '.sql', 'r') as source:
            result += source.read()
        result += '\n'
    return result


def get_events_section(dbname):
    result = 'SET GLOBAL event_scheduler = ON;\n'
    for event in pathlib.Path('events').iterdir():
        result += '\n'
        result += get_comment_header('Event `' + dbname + '`.`' + event.stem + '`')
        result += '\n'
        with open(event, 'r') as source:
            result += source.read()
        result += '\n'
    return result


def generate_sql_script(in_source_build=False, generate_tables=True, generate_udf=True,
                        generate_functions=True, generate_procedures=True, generate_triggers=True,
                        generate_grants=True, generate_data=True, generate_events=True):
    dbname = 'cinemadb'
    if in_source_build:
        build_path = pathlib.Path('.')
    else:
        build_path = pathlib.Path(__file__).cwd().joinpath(pathlib.Path('build'))
        build_path.mkdir(exist_ok=True)
    with open(build_path.joinpath(dbname + '.sql'), 'w') as sql_script:
        sql_script.writelines(get_schema_section(dbname))
        if generate_tables:
            sql_script.writelines(get_tables_section(dbname))
        sql_script.write('USE ' + '`' + dbname + '`;\n')
        sql_script.write('\n')
        if generate_udf:
            sql_script.writelines(get_udf_section())
        if generate_functions:
            sql_script.writelines(get_functions_section(dbname))
        if generate_procedures:
            sql_script.writelines(get_procedures_section(dbname))
        if generate_triggers:
            sql_script.writelines(get_triggers_section(dbname))
        if generate_grants:
            sql_script.writelines(get_grants_section())
        sql_script.write('SET SQL_MODE=@OLD_SQL_MODE;\n')
        sql_script.write('SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\n')
        sql_script.write('SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\n')
        sql_script.write('\n')
        if generate_data:
            sql_script.writelines(get_data_section(dbname))
        if generate_events:
            sql_script.writelines(get_events_section(dbname)[:-1])


if __name__ == '__main__':
    generate_sql_script()
